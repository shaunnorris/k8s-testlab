#!/bin/bash

#initial VM setup
for s in k3s-primary k3s-node1 k3s-node2
do
  multipass launch --name $s --cpus 2 --mem 2048M --disk 3G
done

#install k3s on cluster primary 
multipass exec k3s-primary -- /bin/bash -c "curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" sh -"
PRIMARYIP=`multipass exec k3s-primary -- hostname -I | cut -d' ' -f1`
NODETOKEN=`multipass exec k3s-primary -- sudo cat /var/lib/rancher/k3s/server/node-token`

#install cluster nodes
for installtarget in k3s-node1 k3s-node2
do  
  multipass exec $installtarget -- /bin/bash -c "curl -sfL https://get.k3s.io | K3S_TOKEN=${NODETOKEN} K3S_URL=https://${PRIMARYIP}:6443 sh -"
done

#check cluster status
echo "sleeping for 30s to wait for nodes to come up"
sleep 30
multipass exec k3s-primary -- kubectl get nodes
alias mk='multipass exec k3s-primary -- kubectl'

#Notes on further manual setup

#multipass exec primary -- kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.8.3/manifests/metallb.yaml
#mk apply -f metallb.yaml
#mk get all -A

#setup static routes on host multipass box, as well as wifi / home network
#sudo ip route add 172.16.0.0/24 dev mpqemubr0
#on my asus router ...
#172.16.0.0	255.255.255.0	192.168.0.118		LAN	
#10.106.0.0	255.255.0.0	192.168.0.118		LAN	
#where 192.168.0.118 is my linux box hosting multipass
 
#edit iptables rules generated by multipass to allow greater access into cluster
#this is of course not production grade security and only useful for demos
#sudo iptables-save > iptables.backup.1
#sudo iptables-restore < ./iptables.new

#local storage auto-provisioning 
#multipass exec primaruy -- kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
#kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

#install KOV dashboard

#install helm
#curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
#chmod a+x get_helm.sh
#./get_helm.sh
#helm repo add stable https://kubernetes-charts.storage.googleapis.com/
# helm repo update
# e.g. helm install stable/mysql --generate-name

#install metrics server
#  kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.6/components.yaml

